generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                   Int        @id @default(autoincrement())
  email                String     @unique @db.VarChar(128)
  name                 String     @db.VarChar(80)
  startDate            DateTime   @db.Timestamp(3)
  lastUpdatedOn        DateTime   @db.Timestamp(3)
  lastUpdatedBy        DateTime   @db.Timestamp(3)
  socialSecurity       String     @db.VarChar(9)
  telephone            String     @db.VarChar(13)
  birthday             DateTime   @db.Timestamp()
  zipcode              String     @db.VarChar(5)
  state                String     @db.VarChar(50)
  city                 String     @db.VarChar(50)
  address              String     @db.VarChar(250)
  isAdmin              Boolean?   @default(false)
  isManager            Boolean?   @default(false)
  accessNews           Boolean?   @default(false)
  accessConfiguration  Boolean?   @default(false)
  document             String
  documentId           String
  statusId             Int
  notesCreated         Note[]     @relation("userNoteCreated")
  notesClosed          Note[]     @relation("userNoteClosed")
  newsCreated          News[]     @relation("userNewsCreated")
  newsClosed           News[]     @relation("userNewsClosed")
  status               UserStatus @relation(fields: [statusId], references: [id])

}


model UserStatus {
  id           Int    @id @default(autoincrement())
  code         String @unique @db.VarChar(3)
  description  String @unique @db.VarChar(8)
  users        User[]
}

model Note {
  id               Int        @id @default(autoincrement())
  note             String     @db.VarChar(2000)
  createdOn        DateTime   @default(now()) @db.Timestamp(3)
  closedOn         DateTime   @db.Timestamp(3)
  document         String?
  // documentId       String?
  createdBy        Int
  closedBy         Int
  statusId         Int
  userNoteCreated  User       @relation("userNoteCreated",fields: [createdBy], references: [id])
  userNoteClosed   User       @relation("userNoteClosed",fields: [closedBy], references: [id])
  status           NoteStatus @relation(fields: [statusId], references: [id])


}


model NoteStatus {
  id           Int    @id @default(autoincrement())
  description  String @unique @db.VarChar(10)
  code         String @unique @db.VarChar(3)
  notes        Note[]
}

model NewsStatus {
  id           Int    @id @default(autoincrement())
  description  String @unique @db.VarChar(10)
  code         String @unique @db.VarChar(3)
  news         News[]
}


model News {
  id              Int        @id @default(autoincrement())
  description     String     @db.VarChar(400)
  statusId        Int
  createdBy       Int
  closedBy        Int
  createdOn      DateTime   @default(now()) @db.Timestamp(3)
  closedOn        DateTime   @db.Timestamp(3)
  document        String?
  documentId      String?
  questions       Question[]
  userNewsCreated User       @relation("userNewsCreated",fields: [createdBy], references: [id])
  userNewsClosed  User       @relation("userNewsClosed",fields: [closedBy], references: [id])
  status          NewsStatus @relation(fields: [statusId], references: [id])

}

model Question {
  id          Int       @id @default(autoincrement())
  description String    @db.VarChar(250)
  answer      Boolean
  newsId      Int
  news        News      @relation(fields: [newsId], references: [id])

} 