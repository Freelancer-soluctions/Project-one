generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                   Int                @id @default(autoincrement())
  name                 String             @db.VarChar(100)
  email                String             @unique @db.VarChar(254)
  password             String             @db.VarChar(100)
  address              String?            @db.VarChar(250)
  birthday             DateTime           @db.Timestamp(3)
  city                 String?            @db.VarChar(35)
  isAdmin              Boolean?           @default(false)
  picture              String?
  document             String?
  // documentId    String? // es factible este campo ??
  lastUpdatedBy        Int
  lastUpdatedOn        DateTime?          @db.Timestamp(3)
  roleId               Int
  roles                roles              @relation(fields: [roleId], references: [id])
  socialSecurity       String             @db.VarChar(9)
  startDate            DateTime           @db.Timestamp(3)
  state                String             @db.VarChar(50)
  statusId             Int
  status               userStatus         @relation(fields: [statusId], references: [id])
  telephone            String             @db.VarChar(15)
  zipcode              String             @db.VarChar(9)
  refreshToken         String?            @db.VarChar(200)
  userPermitId         Int
  userPermits          userPermits        @relation(fields: [userPermitId], references: [id])
  newsClosed           news[]             @relation("userNewsClosed")
  newsCreated          news[]             @relation("userNewsCreated")
  newsPending          news[]             @relation("userNewsPending")
  notesCreated         notes[]            @relation("userNoteCreated")
  settingsCreated      settings[]         @relation("userSettingCreated")
  eventsCreated        events[]           @relation("userEventCreated")
  userProductCreated   products[]         @relation("userProductCreated")
  userProductUpdated   products[]         @relation("userProductUpdated")
  userProvidersUpdated productProviders[] @relation("userProvidersUpdated")
  userProvidersCreated productProviders[] @relation("userProvidersCreated")
}

model userPermits {
  id                  Int      @id @default(autoincrement())
  accessConfiguration Boolean? @default(false)
  accessNews          Boolean? @default(false)
  users               users[]
}

model roles {
  id          Int     @id @default(autoincrement())
  code        String  @unique @db.VarChar(3)
  description String  @unique @db.VarChar(50)
  users       users[]
}

model userStatus {
  id          Int     @id @default(autoincrement())
  code        String  @unique @db.VarChar(3)
  description String  @unique @db.VarChar(8)
  users       users[]
}

model notes {
  id              Int         @id @default(autoincrement())
  updatedOn       DateTime?   @db.Timestamp(3)
  createdOn       DateTime    @db.Timestamp(3)
  title           String      @db.VarChar(50)
  content         String      @db.VarChar(2000)
  color           String      @db.VarChar(6)
  columnId        Int
  columnStatus    noteColumns @relation(fields: [columnId], references: [id])
  userNoteCreated users       @relation("userNoteCreated", fields: [createdBy], references: [id])
  createdBy       Int
}

model noteColumns {
  id    Int     @id @default(autoincrement())
  title String  @db.VarChar(15)
  code  String  @unique @db.VarChar(3)
  notes notes[]
}

model newsStatus {
  id          Int    @id @default(autoincrement())
  code        String @unique @db.VarChar(3)
  description String @unique @db.VarChar(10)
  news        news[]
}

model news {
  id              Int        @id @default(autoincrement())
  closedOn        DateTime?  @db.Timestamp(3)
  createdOn       DateTime   @db.Timestamp(3)
  pendingOn       DateTime?  @db.Timestamp(3)
  description     String     @db.VarChar(400)
  document        String?
  documentId      String?
  // questions       questions[]
  status          newsStatus @relation(fields: [statusId], references: [id])
  statusId        Int
  userNewsClosed  users?     @relation("userNewsClosed", fields: [closedBy], references: [id])
  closedBy        Int?
  userNewsPending users?     @relation("userNewsPending", fields: [pendingBy], references: [id])
  pendingBy       Int?
  userNewsCreated users      @relation("userNewsCreated", fields: [createdBy], references: [id])
  createdBy       Int
}

model settings {
  id                 Int       @id @default(autoincrement())
  displayEvents      Boolean?  @default(false)
  displayNotes       Boolean?  @default(false)
  displayNews        Boolean?  @default(false)
  displayProfile     Boolean?  @default(false)
  displayLanguage    Boolean?  @default(false)
  displayReports     Boolean?  @default(false)
  displayPayroll     Boolean?  @default(false)
  language           String    @db.VarChar(2)
  userSettingCreated users     @relation("userSettingCreated", fields: [userId], references: [id])
  userId             Int
  createdOn          DateTime  @default(now()) @db.Timestamp(3)
  updatedOn          DateTime? @db.Timestamp(3)
}

model events {
  id               Int        @id @default(autoincrement())
  title            String     @db.VarChar(50)
  description      String     @db.VarChar(200)
  speaker          String?    @db.VarChar(20)
  startTime        String     @db.VarChar(5)
  endTime          String     @db.VarChar(5)
  eventDate        DateTime   @db.Timestamp(3)
  userEventCreated users      @relation("userEventCreated", fields: [createdBy], references: [id])
  createdBy        Int
  createdOn        DateTime   @db.Timestamp(3)
  updatedOn        DateTime?  @db.Timestamp(3)
  eventTypes       eventTypes @relation(fields: [eventTypeId], references: [id])
  eventTypeId      Int
}

model eventTypes {
  id          Int      @id @default(autoincrement())
  code        String   @unique @db.VarChar(3)
  description String   @unique @db.VarChar(10)
  events      events[]
}

model products {
  id                 Int                 @id @default(autoincrement())
  sku                String              @unique @db.VarChar(16)
  name               String              @db.VarChar(80)
  productCategories  productCategories   @relation(fields: [productCategoryId], references: [id])
  productCategoryId  Int
  productProviders   productProviders    @relation(fields: [productProviderId], references: [id])
  productProviderId  Int
  price              Decimal             @db.Decimal(10, 2)
  cost               Decimal             @db.Decimal(10, 2)
  //stock              Int                 @db.Integer
  description        String?             @db.VarChar(2000)
  productStatus      productStatus       @relation(fields: [productStatusId], references: [id])
  productStatusId    Int
  barCode            String?             @unique @db.VarChar(25)
  userProductCreated users               @relation("userProductCreated", fields: [createdBy], references: [id])
  createdBy          Int
  createdOn          DateTime            @db.Timestamp(3)
  updatedOn          DateTime?           @db.Timestamp(3)
  userProductUpdated users?              @relation("userProductUpdated", fields: [updatedBy], references: [id])
  updatedBy          Int?                @db.Integer
  productAttributes  productAttributes[] @relation("ProductAttributes")
  stock              Stock[]             @relation("ProductStock")
}

model productCategories {
  id          Int        @id @default(autoincrement())
  code        String     @unique @db.VarChar(3)
  description String     @unique @db.VarChar(50)
  createdOn   DateTime   @db.Timestamp(3)
  updatedOn   DateTime?  @db.Timestamp(3)
  products    products[]
}

model productProviders {
  id                   Int        @id @default(autoincrement())
  code                 String     @unique @db.VarChar(3)
  name                 String     @unique @db.VarChar(100)
  createdOn            DateTime   @db.Timestamp(3)
  userProvidersCreated users?     @relation("userProvidersCreated", fields: [createdBy], references: [id])
  createdBy            Int        @db.Integer
  userProvidersUpdated users?     @relation("userProvidersUpdated", fields: [updatedBy], references: [id])
  updatedBy            Int?       @db.Integer
  updatedOn            DateTime?  @db.Timestamp(3)
  status               Boolean    @default(true)
  contactName          String?    @db.VarChar(60)
  contactEmail         String?    @unique @db.VarChar(80)
  contactPhone         String?    @db.VarChar(15)
  address              String?    @db.VarChar(120)
  products             products[]
}

model productStatus {
  id          Int        @id @default(autoincrement())
  code        String     @unique @db.VarChar(3)
  description String     @unique @db.VarChar(10)
  products    products[]
}



model productAttributes {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(50)
  description String   @db.VarChar(100)
  createdOn   DateTime @db.Timestamp(3)
  productId   Int // Clave for√°nea
  product     products @relation("ProductAttributes", fields: [productId], references: [id], onDelete: Cascade)
}

//ALMACEN
model Warehouse {
  id      Int     @id @default(autoincrement())
  name    String  @db.VarChar(50)
  description String? @db.VarChar(120)
  address String? @db.VarChar(120)
  status  WarehouseStatus @default(ACTIVE)
  createdOn DateTime @db.Timestamp(3)
  updatedOn DateTime? @db.Timestamp(3)
  stock   Stock[] @relation("ProductStock")
}
//ALMACEN STATUS
enum WarehouseStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

model Stock {
  id          Int       @id @default(autoincrement())
  productId   Int
  warehouseId Int
  quantity    Int       @default(0)
  minimum     Int       @default(0)
  maximum     Int?
  lot         String?
  expiration  DateTime?
  product     products  @relation("ProductStock", fields: [productId], references: [id])
  warehouse   Warehouse   @relation("ProductStock", fields: [warehouseId], references: [id])
}



